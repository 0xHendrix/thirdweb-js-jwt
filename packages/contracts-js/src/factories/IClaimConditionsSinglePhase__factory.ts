/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  IClaimConditionsSinglePhase,
  IClaimConditionsSinglePhaseInterface,
} from "../IClaimConditionsSinglePhase";
import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxClaimableSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyClaimed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quantityLimitPerTransaction",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "waitTimeInSecondsBetweenClaims",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "merkleRoot",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "pricePerToken",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct IClaimCondition.ClaimCondition",
        name: "claimConditions",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "resetClaimEligibility",
        type: "bool",
      },
    ],
    name: "ClaimConditionUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxClaimableSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyClaimed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quantityLimitPerTransaction",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "waitTimeInSecondsBetweenClaims",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "merkleRoot",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "pricePerToken",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
        ],
        internalType: "struct IClaimCondition.ClaimCondition",
        name: "phase",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "resetClaimEligibility",
        type: "bool",
      },
    ],
    name: "setClaimConditions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IClaimConditionsSinglePhase__factory {
  static readonly abi = _abi;
  static createInterface(): IClaimConditionsSinglePhaseInterface {
    return new utils.Interface(_abi) as IClaimConditionsSinglePhaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IClaimConditionsSinglePhase {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IClaimConditionsSinglePhase;
  }
}
