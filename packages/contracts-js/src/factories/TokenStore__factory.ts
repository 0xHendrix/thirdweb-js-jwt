/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { TokenStore, TokenStoreInterface } from "../TokenStore";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_nativeTokenWrapper",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NATIVE_TOKEN",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bundleId",
        type: "uint256",
      },
    ],
    name: "getTokenCountOfBundle",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bundleId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getTokenOfBundle",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "assetContract",
            type: "address",
          },
          {
            internalType: "enum ITokenBundle.TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ITokenBundle.Token",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bundleId",
        type: "uint256",
      },
    ],
    name: "getUriOfBundle",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155BatchReceived",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161084838038061084883398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516107c0610088600039600050506107c06000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806361195e941161005b57806361195e941461013f578063bc197c811461015f578063d0d2fe251461017e578063f23a6e61146101ac57600080fd5b806301ffc9a71461008d578063150b7a02146100b55780631da799c9146100ec57806331f7d9641461010c575b600080fd5b6100a061009b366004610358565b6101cb565b60405190151581526020015b60405180910390f35b6100d36100c336600461045c565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016100ac565b6100ff6100fa3660046104c4565b610202565b6040516100ac91906104fc565b61012773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6040516001600160a01b0390911681526020016100ac565b61015261014d366004610552565b6102b3565b6040516100ac919061056b565b6100d361016d366004610640565b63bc197c8160e01b95945050505050565b61019e61018c366004610552565b60009081526020819052604090205490565b6040519081526020016100ac565b6100d36101ba3660046106ea565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806101fc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61022e604080516080810190915260008082526020820190815260200160008152602001600081525090565b600083815260208181526040808320858452600290810183529281902081516080810190925280546001600160a01b038116835291939092840191600160a01b900460ff1690811115610283576102836104e6565b6002811115610294576102946104e6565b8152600182015460208201526002909101546040909101529392505050565b60008181526020819052604090206001018054606091906102d39061074f565b80601f01602080910402602001604051908101604052809291908181526020018280546102ff9061074f565b801561034c5780601f106103215761010080835404028352916020019161034c565b820191906000526020600020905b81548152906001019060200180831161032f57829003601f168201915b50505050509050919050565b60006020828403121561036a57600080fd5b81356001600160e01b03198116811461038257600080fd5b9392505050565b80356001600160a01b03811681146103a057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156103e4576103e46103a5565b604052919050565b600082601f8301126103fd57600080fd5b813567ffffffffffffffff811115610417576104176103a5565b61042a601f8201601f19166020016103bb565b81815284602083860101111561043f57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561047257600080fd5b61047b85610389565b935061048960208601610389565b925060408501359150606085013567ffffffffffffffff8111156104ac57600080fd5b6104b8878288016103ec565b91505092959194509250565b600080604083850312156104d757600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b81516001600160a01b03168152602082015160808201906003811061053157634e487b7160e01b600052602160045260246000fd5b80602084015250604083015160408301526060830151606083015292915050565b60006020828403121561056457600080fd5b5035919050565b600060208083528351808285015260005b818110156105985785810183015185820160400152820161057c565b818111156105aa576000604083870101525b50601f01601f1916929092016040019392505050565b600082601f8301126105d157600080fd5b8135602067ffffffffffffffff8211156105ed576105ed6103a5565b8160051b6105fc8282016103bb565b928352848101820192828101908785111561061657600080fd5b83870192505b848310156106355782358252918301919083019061061c565b979650505050505050565b600080600080600060a0868803121561065857600080fd5b61066186610389565b945061066f60208701610389565b9350604086013567ffffffffffffffff8082111561068c57600080fd5b61069889838a016105c0565b945060608801359150808211156106ae57600080fd5b6106ba89838a016105c0565b935060808801359150808211156106d057600080fd5b506106dd888289016103ec565b9150509295509295909350565b600080600080600060a0868803121561070257600080fd5b61070b86610389565b945061071960208701610389565b93506040860135925060608601359150608086013567ffffffffffffffff81111561074357600080fd5b6106dd888289016103ec565b600181811c9082168061076357607f821691505b6020821081141561078457634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122025bb9f1485b0667156bd6d47e48c386060025d409bc7d5dfea042a9c1f329a2564736f6c634300080c0033";

type TokenStoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenStoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenStore__factory extends ContractFactory {
  constructor(...args: TokenStoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _nativeTokenWrapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenStore> {
    return super.deploy(
      _nativeTokenWrapper,
      overrides || {}
    ) as Promise<TokenStore>;
  }
  override getDeployTransaction(
    _nativeTokenWrapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_nativeTokenWrapper, overrides || {});
  }
  override attach(address: string): TokenStore {
    return super.attach(address) as TokenStore;
  }
  override connect(signer: Signer): TokenStore__factory {
    return super.connect(signer) as TokenStore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenStoreInterface {
    return new utils.Interface(_abi) as TokenStoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenStore {
    return new Contract(address, _abi, signerOrProvider) as TokenStore;
  }
}
